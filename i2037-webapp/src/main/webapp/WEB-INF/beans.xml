<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:jaxrs="http://cxf.apache.org/jaxrs"
  xmlns:context="http://www.springframework.org/schema/context"
  xmlns:util="http://www.springframework.org/schema/util"
  xmlns:task="http://www.springframework.org/schema/task"
  xmlns:tx="http://www.springframework.org/schema/tx" xmlns:sec="http://www.springframework.org/schema/security"
  xmlns:p="http://www.springframework.org/schema/p" xmlns:oa="http://www.springframework.org/schema/security/oauth2"  
  xsi:schemaLocation="
http://www.springframework.org/schema/beans 
http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
http://www.springframework.org/schema/context 
http://www.springframework.org/schema/context/spring-context-3.1.xsd
http://www.springframework.org/schema/util 
http://www.springframework.org/schema/util/spring-util-3.1.xsd
http://www.springframework.org/schema/task 
http://www.springframework.org/schema/task/spring-task-3.1.xsd
http://cxf.apache.org/jaxrs
http://cxf.apache.org/schemas/jaxrs.xsd
http://www.springframework.org/schema/tx 
http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
http://www.springframework.org/schema/security
http://www.springframework.org/schema/security/spring-security-3.1.xsd
http://www.springframework.org/schema/security/oauth2
http://www.springframework.org/schema/security/spring-security-oauth2.xsd">

  <import resource="classpath:META-INF/cxf/cxf.xml" />

  <context:property-placeholder location="WEB-INF/i2037.properties" />
  <context:annotation-config />

  <jaxrs:server id="services" address="/">
    <jaxrs:serviceBeans>
      <bean class="net.i2037.cellar.WineServiceImpl">
        <property name="wineDao" ref="wineDao" />
      </bean>
      <bean class="net.i2037.cellar.GrapeServiceImpl">
        <property name="grapeDao" ref="grapeDao" />
      </bean>
      <bean class="net.i2037.cellar.SessionServiceImpl" />
      <ref bean="userService"/>
      <ref bean="movesService"/>
      <bean class="net.i2037.journal.TimeLineServiceImpl">
        <property name="entryLoader" ref="timeLineFeedLoader" />
        <property name="summaryLoader" ref="summaryLoader" />
      </bean>
      <bean class="net.i2037.foursquare.FourSquareServiceImpl">
          <property name="fourSquareTemplate">
              <bean class="org.springframework.web.client.RestTemplate" />
          </property>
      </bean>
      <bean class="net.i2037.journal.CommentServiceImpl">
        <property name="userDao" ref="userDao" />
      	<property name="commentDao" ref="commentDao" />
      	<property name="timeLineEntryDao" ref="timeLineEntryDao" />
      </bean>
    </jaxrs:serviceBeans>
    <jaxrs:providers>
      <bean class="org.codehaus.jackson.jaxrs.JacksonJsonProvider" />
    </jaxrs:providers>
  </jaxrs:server>

  <bean id="transactionManager"
    class="org.springframework.orm.hibernate4.HibernateTransactionManager">
    <property name="sessionFactory" ref="sessionFactory" />
  </bean>

  <bean id="timeLineFeedLoader" class="net.i2037.journal.TimeLineEntryLoader">
    <property name="executorService" ref="feedLoaderExecutorService"/>
    <property name="timeLineFeeds" ref="feeds" />
    <property name="timeLineEntryDao" ref="timeLineEntryDao"/>
  </bean>
  
  <bean id="summaryLoader" class="net.i2037.journal.TimeLineSummaryLoader">
    <property name="executor" ref="feedLoaderExecutorService"/>
    <property name="commentDao" ref="commentDao" />
    <property name="movesService" ref="movesService" /> 
    <property name="userService" ref="userService" />
  </bean>

  <util:list id="feeds">
    <ref bean="movesService" />
  </util:list>
  
  <task:executor id="feedLoaderExecutorService"
                 pool-size="5-25"
                 queue-capacity="100"/>

  <bean id="userService" class="net.i2037.cellar.UserServiceImpl">
    <property name="userDao" ref="userDao" />
    <property name="passwordEncoder" ref="passwordEncoder"/>
  </bean>

  <bean id="movesService" class="net.i2037.moves.MovesServiceImpl">
    <property name="movesTemplate">
      <oa:rest-template resource="moves" access-token-provider="accessTokenProviderChain"/>
    </property>
    <property name="storylineSegmentParser" ref="storylineSegmentParser" />
    <property name="dailySummaryParser" ref="dailySummaryParser"/>
  </bean>

  <bean id="storylineSegmentParser" class="net.i2037.moves.StorylineSegmentParser" />
  
  <bean id="dailySummaryParser" class="net.i2037.moves.DailySummaryParser" />
 
  <tx:annotation-driven />

  <bean id="cellarDB" class="org.apache.commons.dbcp.BasicDataSource"
    destroy-method="close">
    <property name="driverClassName" value="com.mysql.jdbc.Driver" />
    <property name="url" value="jdbc:mysql://${i2037.db.host}/i2037" />
    <property name="username" value="${i2037.db.username}" />
    <property name="password" value="${i2037.db.password}" />
    <property name="validationQuery" value="SELECT 1" />
    <property name="testWhileIdle" value="true" />
  </bean>

  <bean id="sessionFactory"
    class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
    <property name="dataSource" ref="cellarDB" />
    <property name="annotatedClasses">
      <list>
        <value>net.i2037.cellar.model.UserImpl</value>
        <value>net.i2037.cellar.model.RoleImpl</value>                  
        <value>net.i2037.cellar.model.WineImpl</value>
        <value>net.i2037.cellar.model.GrapeImpl</value>
        <value>net.i2037.oauth2.OAuth2AccessTokenImpl</value>
        <value>net.i2037.journal.model.TimeLineEntry</value>
        <value>net.i2037.journal.model.Comment</value>
      </list>
    </property>
    <property name="hibernateProperties">
      <!-- hibernate.hbm2ddl.auto=create|update -->
      <value>hibernate.dialect=org.hibernate.dialect.MySQLDialect
        hibernate.show_sql=true
        hibernate.hbm2ddl.auto=update
      </value>
    </property>
  </bean>

  <bean id="grapeDao" class="net.i2037.cellar.model.GrapeDaoImpl">
    <property name="sessionFactory" ref="sessionFactory" />
  </bean>

  <bean id="wineDao" class="net.i2037.cellar.model.WineDaoImpl">
    <property name="sessionFactory" ref="sessionFactory" />
  </bean>

  <bean id="userDao" class="net.i2037.cellar.model.UserDaoImpl">
      <property name="sessionFactory" ref="sessionFactory" />
  </bean>
  
  <bean id="commentDao" class="net.i2037.journal.model.CommentDaoImpl">
  	<property name="sessionFactory" ref="sessionFactory" />
  </bean>
  
  <bean id="timeLineEntryDao" class="net.i2037.journal.model.TimeLineEntryDaoImpl">
  	<property name="sessionFactory" ref="sessionFactory" />
  </bean>
  
  <!-- Security -->
  <sec:global-method-security secured-annotations="enabled" />
  
  <!-- returns 403 Forbidden if the error url is not set -->
  <bean id="accessDeniedHandler"
    class="org.springframework.security.web.access.AccessDeniedHandlerImpl" />
  
  <!-- returns 401 Unauthorized if the defaultFailureUrl is not set  -->
  <bean id="authFailureHandler"
    class="org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler" />
   
  <!-- returns 403 forbidden -->
  <bean id="forbiddenEntryPoint"
    class="org.springframework.security.web.authentication.Http403ForbiddenEntryPoint" />

  <sec:http entry-point-ref="forbiddenEntryPoint">
    <sec:access-denied-handler ref="accessDeniedHandler" />
    <sec:form-login authentication-failure-handler-ref="authFailureHandler" default-target-url="/svc/user" />
    <sec:logout delete-cookies="JSESSIONID" logout-success-url="/svc/session/loggedout" />
    <sec:session-management />
    <sec:intercept-url pattern="/svc/session/loggedout" access="ROLE_ANONYMOUS,ROLE_USER" />
    <sec:intercept-url pattern="/svc/user" access="ROLE_ANONYMOUS" method="POST"/>
    <sec:intercept-url pattern="/svc/**" access="ROLE_USER" />
    <sec:intercept-url pattern="/**" access="ROLE_ANONYMOUS,ROLE_USER" />

    <sec:custom-filter ref="oauth2ClientFilter" after="EXCEPTION_TRANSLATION_FILTER" />
  </sec:http>

  <sec:authentication-manager>
    <sec:authentication-provider user-service-ref="userDetailsService">
        <sec:password-encoder ref="passwordEncoder" />
    </sec:authentication-provider>
  </sec:authentication-manager>
  
  <bean id="passwordEncoder" class="org.springframework.security.crypto.password.StandardPasswordEncoder">
      <constructor-arg>
          <value>${i2037.password.salt}</value>          
      </constructor-arg>
  </bean>
  
  <bean id="userDetailsService" class="net.i2037.cellar.UserDetailsServiceImpl">
      <property name="userDao" ref="userDao" />
  </bean>
  
  <!-- spring oauth -->
  <oa:client id="oauth2ClientFilter" redirect-strategy-ref="jsonRedirect" />
  
  <!--  returns JSON object so that Angular can change window location rather than relying upon 302 -->
  <bean id="jsonRedirect" class="net.i2037.oauth2.AngularRedirectStrategy" />

  <oa:resource id="moves" 
    type="authorization_code"
    pre-established-redirect-uri="${i2037.moves.redirect-uri}"
    use-current-uri="false"
    client-id="${i2037.moves.client-id}"
    client-secret="${i2037.moves.client-secret}"
    user-authorization-uri="https://api.moves-app.com/oauth/v1/authorize"
    access-token-uri="https://api.moves-app.com/oauth/v1/access_token"
    scope="activity location" 
    client-authentication-scheme="form" />

  <bean id="accessTokenProviderChain"
    class="org.springframework.security.oauth2.client.token.AccessTokenProviderChain">
<!-- Redefinition of the default access token providers -->
    <constructor-arg index="0">
      <list>
        <bean class="org.springframework.security.oauth2.client.token.grant.code.AuthorizationCodeAccessTokenProvider" />
        <bean
          class="org.springframework.security.oauth2.client.token.grant.implicit.ImplicitAccessTokenProvider" />
        <bean
          class="org.springframework.security.oauth2.client.token.grant.password.ResourceOwnerPasswordAccessTokenProvider" />
        <bean
          class="org.springframework.security.oauth2.client.token.grant.client.ClientCredentialsAccessTokenProvider" />
      </list>
    </constructor-arg>
    <property name="clientTokenServices" ref="clientTokenServices" />
  </bean>
  
  <bean id="clientTokenServices" class="net.i2037.oauth2.ClientTokenServicesDao">
    <property name="sessionFactory" ref="sessionFactory" />      
  </bean>
</beans>
